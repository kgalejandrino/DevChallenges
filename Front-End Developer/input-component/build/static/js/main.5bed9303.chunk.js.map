{"version":3,"sources":["hoc/Auxilliary/Auxilliary.js","components/Sidebar/ComponentStates/ComponentStates.js","components/Sidebar/Sidebar.js","components/Canvas/Display/Button/Button.js","components/Canvas/Display/Input/Input.js","components/Canvas/Display/Display.js","components/Canvas/Panel/ButtonControls/ButtonControls.js","components/Canvas/Panel/InputControls/InputControls.js","components/Canvas/Panel/Panel.js","components/Canvas/Canvas.js","hoc/Layout/Layout.js","container/App.js","reportWebVitals.js","index.js"],"names":["aux","props","children","ComponentStates","useState","selected","setSelected","className","list","map","component","id","onClick","forEach","item","type","posClicked","typeClicked","style","color","text","componentsList","Sidebar","listIcon","setlistIcon","componentStates","setComponentStates","slideRight","menu","Object","keys","idx","i","setComponent","prevState","undefined","Radium","offShadow","boxShadow","borderHoverColor","btnStyles","backgroundColor","btnBgColor","btnTextColor","displayIcon","position","setIcon","btnDisableShadow","btnBoxShadowColor","btnHoverColor","border","s","displayButton","componentState","setSize","disabled","isDisabled","btnText","hoverColor","focusColor","inputStyles","inputTextColor","borderColor","inputBorderColor","inputHoverColor","inputFocusColor","displayHelperText","displayInput","placeholder","displayTextArea","rows","cols","display","render","renderComponent","buttonControls","onChange","btnTextChange","defaultValue","btnTextColorChange","btnBgColorChange","btnShadowColorChange","btnHoverColorChange","selectDisable","btnShadowChange","selectIcon","selectSize","inputControls","inputTextColorChange","inputBorderColorChange","inputHoverColorChange","inputFocusColorChange","panel","Canvas","commonProperties","setCommonProperties","btnProperties","setBtnProperties","inputProperties","setInputProperties","size","icon","textColor","bgColor","boxShadowColor","disableShadow","evt","target","value","Layout","getComponent","com","setState","handleBtnTypeClicked","handleIconPosClicked","pos","iconPosition","handleMenuClicked","slideMenu","state","iconMenu","this","Component","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.5bed9303.chunk.js","sourcesContent":["const aux = (props) => props.children;\r\n\r\nexport default aux;","import React, { useState }from 'react';\r\n\r\nimport './ComponentStates.css';\r\n\r\nconst ComponentStates = (props) => {\r\n    const [selected, setSelected] = useState(1);\r\n\r\n    const getComponent = (id) => {\r\n        setSelected(id);\r\n        const component = props.list.forEach(item => {\r\n            if(item.id === id) {\r\n                if(item.type === 'btn-left--icon' || item.type === 'btn-right--icon') {\r\n                    props.posClicked(item.type);\r\n                    props.typeClicked('btn-icon');\r\n                } else if(item.type === 'input-left--icon') {\r\n                    props.posClicked(item.type);\r\n                    props.typeClicked('input-icon-left');\r\n                }  else if(item.type === 'input-right--icon') {\r\n                    props.posClicked(item.type);\r\n                    props.typeClicked('input-icon-right');\r\n                } else {\r\n                    props.posClicked('');\r\n                    props.typeClicked(item.type);\r\n                }\r\n            }\r\n        });\r\n        return component;\r\n    }\r\n\r\n\r\n    return (\r\n        <ul className=\"ComponentStates\">\r\n            {props.list.map(component =>\r\n                <li \r\n                    id={selected === component.id ? 'highlighted' : null}\r\n                    key={component.id}\r\n                    onClick={() => getComponent(component.id)}>\r\n                    <span \r\n                        className=\"material-icons md-18 add-icon\" \r\n                        style={{color: selected === component.id ? '#fff' : '#f7542e'}}>bookmark_border\r\n                    </span>\r\n                    {component.text}\r\n                </li>\r\n                \r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default ComponentStates;","import React, { useState } from 'react';\r\n\r\nimport './Sidebar.css';\r\nimport Aux from '../../hoc/Auxilliary/Auxilliary';\r\nimport ComponentStates from './ComponentStates/ComponentStates';\r\n\r\nconst componentsList = {\r\n    'Colors': [],\r\n    'Typography': [],\r\n    'Spaces': [],\r\n    'Buttons': [\r\n        { id: 1, type: 'btn-default', text: 'Default Button'}, \r\n        { id: 2, type: 'btn-outline', text: 'Outline Button' },\r\n        { id: 3, type: 'btn-text', text: 'Text Button'},\r\n        { id: 4, type: 'btn-left--icon', text: 'Left Icon Button'},\r\n        { id: 5, type: 'btn-right--icon', text: 'Right Icon Button'},\r\n        { id: 6, type: 'btn-primary', text: 'Primary Button' },\r\n        { id: 7, type: 'btn-secondary', text: 'Secondary Button'}, \r\n        { id: 8, type: 'btn-danger', text: 'Danger Button' }\r\n    ],\r\n    'Inputs': [\r\n        { id: 1, type: 'input-default', text: 'Default Input' },\r\n        { id: 2, type: 'input-error', text: 'Error Input' },\r\n        { id: 3, type: 'input-validation', text: 'Validation Input' },\r\n        { id: 4, type: 'input-left--icon', text: 'Left Icon Input' },\r\n        { id: 5, type: 'input-right--icon', text: 'Right Icon Input' },\r\n        { id: 6, type: 'input-multiline', text: 'Multiline Input' },\r\n    ] ,\r\n    'Grid': []\r\n}\r\n\r\nconst Sidebar = (props) => {\r\n    let [listIcon, setlistIcon] = useState({\r\n        'Colors': 'add_box',\r\n        'Typography': 'add_box',\r\n        'Spaces': 'add_box',\r\n        'Buttons': 'add_box',\r\n        'Inputs': 'add_box',\r\n        'Grid': 'add_box',\r\n    });\r\n    let [componentStates, setComponentStates] = useState('');\r\n\r\n    /* Toggle button states lists */\r\n    const toggleListBtnStates = (i) => {\r\n        Object.keys(componentsList).forEach((list, idx) => {\r\n            if(idx === i && listIcon[list] === 'add_box') {\r\n                setComponentStates(list);\r\n                props.setComponent(list);\r\n\r\n                setlistIcon(prevState => ({\r\n                    ...prevState,\r\n                    [list]: 'remove'  \r\n                }));\r\n\r\n                /* Render default state at first selection */\r\n                if(componentsList[list][0] !== undefined) {\r\n                    props.typeClicked(componentsList[list][0].type);\r\n                    props.posClicked('');\r\n                } else {\r\n                    props.typeClicked('progress');\r\n                }\r\n            } else if(idx === i && listIcon[list] === 'remove'){\r\n                setComponentStates('');\r\n                props.typeClicked('');\r\n                props.setComponent(null);\r\n\r\n                setlistIcon(prevState => ({\r\n                    ...prevState,\r\n                    [list]: 'add_box'  \r\n                }));\r\n            }\r\n\r\n            /* If drop down list is currently open and user selects another component\r\n               it will automatically close that drop down and switch to another component,\r\n               so will the icons*/\r\n            if(idx !== i && listIcon[list] === 'remove') {\r\n                setlistIcon(prevState => ({\r\n                    ...prevState,\r\n                    [list]: 'add_box'  \r\n                }));\r\n            }\r\n        })\r\n    }\r\n \r\n    const slideRight = props.menu ? 'slide-right' : null;\r\n\r\n    return (\r\n        <div className=\"Sidebar\" id={slideRight}>\r\n            <div className=\"sidebar-title\">\r\n                <span className=\"dev\"><b>Dev</b></span>\r\n                <span className=\"challenges\"><b>challenges.io</b></span>\r\n            </div>\r\n            <nav>\r\n                <ul className=\"main-nav\">\r\n                    {Object.keys(componentsList).map((list, idx) => {\r\n                        return (\r\n                            <Aux key={idx}>\r\n                                <li>\r\n                                    <span \r\n                                        onClick={() => toggleListBtnStates(idx)}\r\n                                        className=\"material-icons md-18 add-icon\">\r\n                                        {listIcon[list]}\r\n                                    </span>\r\n                                    {list} \r\n                                </li> \r\n                                {list === componentStates\r\n                                    ? <ComponentStates \r\n                                        typeClicked={props.typeClicked} \r\n                                        posClicked={props.posClicked} \r\n                                        list={componentsList[list]}\r\n                                        /> \r\n                                    : null \r\n                                }\r\n                            </Aux>  \r\n                        )\r\n                    })}\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport Radium from 'radium';\r\n\r\nimport './Button.css';\r\nimport Aux from '../../../../hoc/Auxilliary/Auxilliary';\r\n\r\nconst button = (props) => {\r\n    let offShadow, boxShadow, borderHoverColor = null;\r\n    const btnStyles = {\r\n        backgroundColor: props.btnBgColor,\r\n        color: props.btnTextColor,\r\n    };\r\n\r\n    const displayIcon = props.position ? <span className={`material-icons md-24 ${props.position}`}>{props.setIcon}</span> : null;\r\n\r\n    if(props.btnDisableShadow) { offShadow = { boxShadow: \"none\" } }\r\n\r\n    if(props.btnBoxShadowColor) { boxShadow = { boxShadow: `0 0 4px ${props.btnBoxShadowColor}`} }\r\n\r\n    if(props.btnHoverColor) { \r\n        borderHoverColor = {\r\n            ':hover': {\r\n                border: `4px solid ${props.btnHoverColor}`\r\n            } \r\n        }\r\n    }\r\n\r\n    const size = (s) => {\r\n        if(s === 'small') {\r\n            s = 'btn-small';\r\n        } else if(s === 'medium') {\r\n            s = 'btn-medium';\r\n        } else if(s === 'large') {\r\n            s = 'btn-large';\r\n        }\r\n        return s;\r\n    }\r\n\r\n    const displayButton = \r\n        props.componentState \r\n            ? <button \r\n                style={{...offShadow, ...boxShadow, ...borderHoverColor, ...btnStyles}}\r\n                className={`btn ${size(props.setSize)}`} \r\n                id={props.componentState} \r\n                disabled={props.isDisabled}>\r\n                    {displayIcon}\r\n                    {props.btnText}\r\n            </button>\r\n            : null;\r\n\r\n\r\n    return <Aux>{displayButton}</Aux>\r\n}\r\n\r\nexport default Radium(button);","import React from 'react';\r\nimport Radium from 'radium';\r\n\r\nimport './Input.css';\r\nimport Aux from '../../../../hoc/Auxilliary/Auxilliary';\r\n\r\nconst input = (props) => {\r\n    let hoverColor, focusColor = null;\r\n\r\n    const inputStyles = {\r\n        color: props.inputTextColor,\r\n        borderColor: props.inputBorderColor\r\n    }\r\n\r\n    if(props.inputHoverColor) {\r\n        hoverColor = {\r\n          ':hover': {\r\n            borderColor: props.inputHoverColor\r\n          }           \r\n        }\r\n    }\r\n\r\n    if(props.inputFocusColor) {\r\n      focusColor = {\r\n        ':focus': {\r\n          borderColor: props.inputFocusColor\r\n        }           \r\n      }\r\n  }\r\n\r\n  const size = (s) => {\r\n    if(s === 'small') {\r\n        s = 'input-small';\r\n    } else if(s === 'medium') {\r\n        s = 'input-medium';\r\n    } else if(s === 'large') {\r\n        s = 'input-large';\r\n    }\r\n    return s;\r\n  }\r\n\r\n  const displayIcon = props.position ? <span className={`material-icons md-28 ${props.position}`}>{props.setIcon}</span> : null;\r\n\r\n  const displayHelperText = props.componentState === 'input-validation' ? <p id=\"helper-text\">Some interesting text</p> : null;\r\n\r\n  const displayInput = \r\n            <div className=\"input-container\">\r\n              {displayIcon}\r\n              <input \r\n                type=\"text\"\r\n                style={{...hoverColor, ...focusColor, ...inputStyles}}\r\n                className={`input ${size(props.setSize)}`}\r\n                id={props.componentState}\r\n                placeholder=\"Placeholder\"\r\n                disabled={props.isDisabled}>\r\n              </input>\r\n              {displayHelperText}\r\n            </div>\r\n\r\n  const displayTextArea = \r\n          <textarea \r\n              rows=\"6\" \r\n              cols=\"20\"\r\n              style={{...hoverColor, ...focusColor, ...inputStyles}}\r\n              id={props.componentState} \r\n              placeholder=\"Placeholder\"\r\n              disabled={props.isDisabled}\r\n          />\r\n\r\n  return (\r\n    <Aux>\r\n      {props.componentState === 'input-multiline'\r\n        ? displayTextArea\r\n        : displayInput\r\n      }\r\n    </Aux>\r\n  )\r\n}\r\n\r\nexport default Radium(input);","import React from 'react';\r\n\r\nimport './Display.css';\r\nimport Button from './Button/Button';\r\nimport Input from './Input/Input';\r\n\r\nconst display = (props) => {\r\n    const renderComponent = (render) => {\r\n        switch(render) {\r\n            case 'Buttons':\r\n                return <Button \r\n                            componentState={props.componentState}\r\n                            position={props.position}\r\n                            isDisabled={props.isDisabled}\r\n                            setIcon={props.setIcon}\r\n                            setSize={props.setSize}\r\n                            btnText={props.btnText}\r\n                            btnTextColor={props.btnTextColor}\r\n                            btnBgColor={props.btnBgColor}\r\n                            btnBoxShadowColor={props.btnBoxShadowColor}\r\n                            btnHoverColor={props.btnHoverColor}\r\n                            btnDisableShadow={props.btnDisableShadow}>{props.text}\r\n                        </Button>\r\n            case 'Inputs':\r\n                return <Input \r\n                            componentState={props.componentState}\r\n                            position={props.position}\r\n                            setIcon={props.setIcon}\r\n                            setSize={props.setSize}\r\n                            inputTextColor={props.inputTextColor}\r\n                            inputBorderColor={props.inputBorderColor}\r\n                            inputHoverColor={props.inputHoverColor}\r\n                            inputFocusColor={props.inputFocusColor}\r\n                            isDisabled={props.isDisabled} \r\n                       />\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"Display\">\r\n            <h2>{props.componentState === 'progress' ? 'In Progress' : props.component}</h2>\r\n            {renderComponent(props.component)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default display;","import React from 'react';\r\n\r\nimport './ButtonControls.css';\r\nimport Aux from '../../../../hoc/Auxilliary/Auxilliary';\r\n\r\nconst buttonControls = (props) => {\r\n    return (\r\n        <Aux>\r\n            <tbody>\r\n                <tr>\r\n                    <td><b>Text</b></td>\r\n                    <td>\r\n                        <textarea className=\"panel-textarea\" onChange={props.btnTextChange} defaultValue=\"Default\"></textarea>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td><b>Color</b></td>\r\n                    <td>\r\n                        <div id=\"td-container\">\r\n                            <div className=\"td-boxes\">\r\n                                <div className=\"box\">\r\n                                    <span>Text</span>\r\n                                    <input type=\"color\" defaultValue=\"#efefef\" onChange={props.btnTextColorChange}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"td-boxes\">\r\n                                <div className=\"box\">\r\n                                    <span>Background</span>\r\n                                    <input type=\"color\" defaultValue=\"#efefef\" onChange={props.btnBgColorChange}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"td-boxes\">\r\n                                <div className=\"box\">   \r\n                                    <span>Shadow</span>\r\n                                    <input type=\"color\" defaultValue=\"#efefef\" onChange={props.btnShadowColorChange}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"td-boxes\">\r\n                                <div className=\"box\">\r\n                                    <span>Border Hover</span>\r\n                                    <input type=\"color\" defaultValue=\"#efefef\" onChange={props.btnHoverColorChange}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td><b>Button</b></td>\r\n                    <td>\r\n                        <select onChange={props.selectDisable} className=\"disabled\">\r\n                            <option>Enabled</option>\r\n                            <option>Disabled</option>\r\n                        </select>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td><b>Box-shadow</b></td>\r\n                    <td>\r\n                        <select onChange={props.btnShadowChange}>\r\n                                <option>Enabled</option>\r\n                                <option>Disabled</option>\r\n                        </select>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td><b>Change Icon</b></td>\r\n                    <td>\r\n                        <select onChange={props.selectIcon}>\r\n                                <option>face</option>\r\n                                <option>heart</option>\r\n                                <option>leaf</option>\r\n                                <option>tool</option>\r\n                                <option>star</option>\r\n                        </select>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td><b>Change Size</b></td>\r\n                    <td>\r\n                        <select onChange={props.selectSize}>\r\n                                <option>small</option>\r\n                                <option>medium</option>\r\n                                <option>large</option>\r\n                        </select>\r\n                    </td>                        \r\n                </tr>\r\n            </tbody>\r\n        </Aux>\r\n    )\r\n}\r\n\r\nexport default buttonControls;","import React from 'react';\r\n\r\nimport './InputControls.css';\r\nimport Aux from '../../../../hoc/Auxilliary/Auxilliary';\r\n\r\nconst inputControls = (props) => {\r\n    return (\r\n        <Aux>\r\n            <tbody>\r\n               <tr>\r\n                    <td><b>Color</b></td>\r\n                    <td>\r\n                    <div id=\"td-container\">\r\n                            <div className=\"td-boxes\">\r\n                                <div className=\"box\">\r\n                                    <span>Text</span>\r\n                                    <input type=\"color\" defaultValue=\"#efefef\" onChange={props.inputTextColorChange}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"td-boxes\">\r\n                                <div className=\"box\">\r\n                                    <span>Border</span>\r\n                                    <input type=\"color\" defaultValue=\"#efefef\" onChange={props.inputBorderColorChange}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"td-boxes\">\r\n                                <div className=\"box\">   \r\n                                    <span>Hover</span>\r\n                                    <input type=\"color\" defaultValue=\"#efefef\" onChange={props.inputHoverColorChange}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"td-boxes\">\r\n                                <div className=\"box\">\r\n                                    <span>Focus</span>\r\n                                    <input type=\"color\" defaultValue=\"#efefef\" onChange={props.inputFocusColorChange}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n               </tr>\r\n               <tr>\r\n                   <td><b>Input</b></td>\r\n                   <td>\r\n                        <select onChange={props.selectDisable} className=\"disabled\">\r\n                            <option>Enabled</option>\r\n                            <option>Disabled</option>\r\n                        </select>\r\n                    </td>\r\n               </tr>\r\n               <tr>\r\n                    <td><b>Change Icon</b></td>\r\n                    <td>\r\n                        <select onChange={props.selectIcon}>\r\n                                <option>face</option>\r\n                                <option>heart</option>\r\n                                <option>leaf</option>\r\n                                <option>tool</option>\r\n                                <option>star</option>\r\n                        </select>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td><b>Change Size</b></td>\r\n                    <td>\r\n                        <select onChange={props.selectSize}>\r\n                                <option>small</option>\r\n                                <option>medium</option>\r\n                                <option>large</option>\r\n                        </select>\r\n                    </td>                        \r\n                </tr>\r\n            </tbody>\r\n        </Aux>\r\n    )\r\n}\r\n\r\nexport default inputControls;","import React from 'react';\r\n\r\nimport './Panel.css';\r\nimport ButtonControls from './ButtonControls/ButtonControls';\r\nimport InputControls from './InputControls/InputControls';\r\n\r\nconst panel = (props) => {\r\n    const renderControl = (component) => {\r\n        if(component === 'Buttons') {\r\n            return <ButtonControls \r\n                selectDisable={props.selectDisable}\r\n                selectSize={props.selectSize}\r\n                selectIcon={props.selectIcon}\r\n                btnTextChange={props.btnTextChange}\r\n                btnTextColorChange={props.btnTextColorChange}\r\n                btnBgColorChange={props.btnBgColorChange}\r\n                btnShadowColorChange={props.btnShadowColorChange}\r\n                btnHoverColorChange={props.btnHoverColorChange}\r\n                btnShadowChange={props.btnShadowChange}\r\n            />\r\n        } else if(component === 'Inputs') {\r\n            return <InputControls \r\n                inputTextColorChange={props.inputTextColorChange}\r\n                inputBorderColorChange={props.inputBorderColorChange}\r\n                inputHoverColorChange={props.inputHoverColorChange}\r\n                inputFocusColorChange={props.inputFocusColorChange}\r\n                selectDisable={props.selectDisable}\r\n                selectIcon={props.selectIcon}\r\n                selectSize={props.selectSize}\r\n                />\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"Panel\">\r\n            <div className=\"tab\"><span>Controls</span></div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Control</th>\r\n                    </tr>\r\n                </thead>\r\n                {renderControl(props.component)}\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default panel;","import React, { useState } from 'react';\r\n\r\nimport './Canvas.css';\r\nimport Display from './Display/Display';\r\nimport Panel from './Panel/Panel';\r\n\r\n\r\nconst Canvas = (props) => {\r\n    let [commonProperties, setCommonProperties]  = useState({\r\n        'disabled': false,\r\n        'icon': 'face',\r\n        'size': 'small'\r\n    });\r\n\r\n    let [btnProperties, setBtnProperties] = useState({\r\n        'btnText': 'Default',\r\n        'textColor': '',\r\n        'bgColor': '',\r\n        'boxShadowColor': '',\r\n        'borderHoverColor': '',\r\n        'disableShadow': false\r\n    });\r\n\r\n    let [inputProperties, setInputProperties] = useState({\r\n        'textColor': '',\r\n        'borderColor': '',\r\n        'hoverColor': '',\r\n        'focusColor': ''\r\n    })\r\n\r\n    /*--- Common properties between components: disable, icon, size ---*/\r\n    /* Controller functions: sets state based on user selection*/\r\n    const handleDisableSelection = () => setCommonProperties(({disabled, ...prevState}) => ({\r\n        ...prevState,\r\n        disabled: !disabled\r\n    }));\r\n\r\n    const handleSizeSelection = (evt) => setCommonProperties(prevState => ({\r\n        ...prevState,\r\n        size: evt.target.value\r\n    }));\r\n\r\n    const handleIconSelection = (evt) => {\r\n        switch(evt.target.value) {\r\n            case 'heart':\r\n                setCommonProperties(prevState => ({\r\n                    ...prevState,\r\n                    icon: 'favorite'\r\n                }));\r\n                break;\r\n            case 'leaf':\r\n                setCommonProperties(prevState => ({\r\n                    ...prevState,\r\n                    icon: 'eco'\r\n                }));\r\n                break;\r\n            case 'tool':\r\n                setCommonProperties(prevState => ({\r\n                    ...prevState,\r\n                    icon: 'build'\r\n                }));\r\n                break;\r\n            case 'star':\r\n                setCommonProperties(prevState => ({\r\n                    ...prevState,\r\n                    icon: 'grade'\r\n                }));\r\n                break;\r\n            default:\r\n                setCommonProperties(prevState => ({\r\n                    ...prevState,\r\n                    icon: 'face'\r\n                }));\r\n                break;\r\n        }\r\n    }\r\n\r\n    /* Controller functions: Button States */\r\n    const hanldeBtnTextChange = (evt) => setBtnProperties(({btnText, ...prevState}) => ({\r\n        ...prevState,\r\n        btnText: evt.target.value\r\n    }));\r\n\r\n    const handleBtnTextColorChange = (evt) => setBtnProperties(({textColor, ...prevState}) => ({\r\n        ...prevState,\r\n        textColor: evt.target.value\r\n    }));\r\n\r\n    const handleBtnBgColorChange = (evt) => setBtnProperties(({bgColor, ...prevState}) => ({\r\n        ...prevState,\r\n        bgColor: evt.target.value\r\n    }));\r\n\r\n    const handleBtnShadowColorChange = (evt) => setBtnProperties(({boxShadowColor, ...prevState}) => ({\r\n        ...prevState,\r\n        boxShadowColor: evt.target.value\r\n    }));\r\n\r\n    const handleBtnHoverColorChange = (evt) => setBtnProperties(({borderHoverColor, ...prevState}) => ({\r\n        ...prevState,\r\n        borderHoverColor: evt.target.value\r\n    }));\r\n\r\n    const handleBtnBoxShadowChange = () => setBtnProperties(({disableShadow, ...prevState}) => ({\r\n        ...prevState,\r\n        disableShadow: !disableShadow\r\n    }));\r\n\r\n    /* Controller functions: Input States */  \r\n    const handleInputTextColorChange = (evt) => setInputProperties(({textColor, ...prevState}) => ({\r\n        ...prevState,\r\n        textColor: evt.target.value\r\n    }));\r\n\r\n    const handleInputBorderColorChange = (evt) => setInputProperties(({borderColor, ...prevState}) => ({\r\n        ...prevState,\r\n        borderColor: evt.target.value\r\n    }));\r\n\r\n    const handleInputHoverColorChange = (evt) => setInputProperties(({hoverColor, ...prevState}) => ({\r\n        ...prevState,\r\n        hoverColor: evt.target.value\r\n    }));\r\n\r\n    const handleInputFocusColorChange = (evt) => setInputProperties(({focusColor, ...prevState}) => ({\r\n        ...prevState,\r\n        focusColor: evt.target.value\r\n    }));\r\n\r\n    return (\r\n        <div className=\"Canvas\">\r\n            <Display \r\n                component={props.component}\r\n                componentState={props.componentState}\r\n                position={props.position}\r\n                isDisabled={commonProperties.disabled}\r\n                setSize={commonProperties.size}\r\n                setIcon={commonProperties.icon}\r\n                btnText={btnProperties.btnText}\r\n                btnTextColor={btnProperties.textColor}\r\n                btnBgColor={btnProperties.bgColor}\r\n                btnBoxShadowColor={btnProperties.boxShadowColor}\r\n                btnHoverColor={btnProperties.borderHoverColor}\r\n                btnDisableShadow={btnProperties.disableShadow}\r\n                inputTextColor={inputProperties.textColor}\r\n                inputBorderColor={inputProperties.borderColor}\r\n                inputHoverColor={inputProperties.hoverColor}\r\n                inputFocusColor={inputProperties.focusColor}\r\n            />\r\n            <Panel \r\n                component={props.component}\r\n                selectDisable={handleDisableSelection}\r\n                selectSize={handleSizeSelection}\r\n                selectIcon={handleIconSelection}\r\n                btnTextChange={hanldeBtnTextChange}\r\n                btnTextColorChange={handleBtnTextColorChange}\r\n                btnBgColorChange={handleBtnBgColorChange}\r\n                btnShadowColorChange={handleBtnShadowColorChange}\r\n                btnHoverColorChange={handleBtnHoverColorChange}\r\n                btnShadowChange={handleBtnBoxShadowChange}\r\n                inputTextColorChange={handleInputTextColorChange}\r\n                inputBorderColorChange={handleInputBorderColorChange}\r\n                inputHoverColorChange={handleInputHoverColorChange}\r\n                inputFocusColorChange={handleInputFocusColorChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Canvas;","import React, { Component } from 'react';\r\n\r\nimport './Layout.css';\r\nimport Sidebar from '../../components/Sidebar/Sidebar';\r\nimport Canvas from '../../components/Canvas/Canvas';\r\nimport Aux from '../Auxilliary/Auxilliary';\r\n\r\nclass Layout extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          component: null,\r\n          componentState: '',\r\n          iconPosition: '',\r\n          slideMenu: false,\r\n          iconMenu: 'menu'\r\n        }\r\n      }\r\n      \r\n      /* Function: set the component clicked */\r\n      getComponent = (com) => this.setState({ component: com });\r\n\r\n      /* Function: set component state default/ oultine/ text */\r\n      handleBtnTypeClicked = (type) => this.setState({ componentState: type });\r\n    \r\n      /* Function: set component state w/ icon: left/right icon */\r\n      handleIconPosClicked = (pos) => this.setState({ iconPosition: pos });\r\n\r\n      /* Handle Slide Menu */\r\n      handleMenuClicked = () => {\r\n        this.setState(prevState => ({ \r\n          slideMenu: !prevState.slideMenu,\r\n        }));\r\n\r\n        if(this.state.iconMenu === 'menu') {\r\n          this.setState({ iconMenu: 'close'});\r\n        } else {\r\n          this.setState({ iconMenu: 'menu'});\r\n        }\r\n      }\r\n\r\n      render() {\r\n        return (\r\n          <Aux>\r\n            <span \r\n                className=\"material-icons md-36 icon-menu\" \r\n                id={this.state.iconMenu} \r\n                onClick={this.handleMenuClicked}>{this.state.iconMenu}\r\n            </span>\r\n            <div className=\"Layout\">       \r\n              <Sidebar\r\n                menu={this.state.slideMenu} \r\n                setComponent={this.getComponent}\r\n                typeClicked={this.handleBtnTypeClicked}\r\n                posClicked={this.handleIconPosClicked}\r\n              />\r\n              <Canvas\r\n                component={this.state.component} \r\n                componentState={this.state.componentState}\r\n                position={this.state.iconPosition}\r\n              />\r\n          </div>\r\n          </Aux>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\n\nimport Aux from '../hoc/Auxilliary/Auxilliary';\nimport Layout from '../hoc/Layout/Layout';\n\nconst app = () => {\n    return (\n     <Aux>\n       <Layout />\n     </Aux>\n    );\n}\n\nexport default app;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './container/App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}